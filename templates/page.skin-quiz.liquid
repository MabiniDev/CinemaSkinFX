{% comment %}
  Skin Quiz Template for Shopify
  Usage: Create a new page template called page.skin-quiz.liquid
  Then create a page with template suffix "skin-quiz"
{% endcomment %}

{% assign quiz_products = collections['skincare'].products %}

<div class="skin-quiz-container">
  <div class="quiz-header">
    <h1>âœ¨ Find Your Perfect Skincare Routine</h1>
    <p>Answer a few questions to get personalized product recommendations</p>
  </div>

  <div class="quiz-content">
    <div class="progress-bar">
      <div class="progress-fill" id="progressFill"></div>
    </div>

    <!-- Question 1: Skin Type -->
    <div class="question active" data-question="1">
      <h3>What's your skin type?</h3>
      <div class="options">
        <div class="option" data-value="oily" data-tags="oily">
          <strong>Oily</strong><br>
          <span>Shiny T-zone, large pores, frequent breakouts</span>
        </div>
        <div class="option" data-value="dry" data-tags="dry">
          <strong>Dry</strong><br>
          <span>Tight feeling, flaky, rough texture</span>
        </div>
        <div class="option" data-value="combination" data-tags="combination">
          <strong>Combination</strong><br>
          <span>Oily T-zone, normal to dry cheeks</span>
        </div>
        <div class="option" data-value="sensitive" data-tags="sensitive">
          <strong>Sensitive</strong><br>
          <span>Easily irritated, redness, reactions</span>
        </div>
      </div>
    </div>

    <!-- Question 2: Main Concern -->
    <div class="question" data-question="2">
      <h3>What's your main skin concern?</h3>
      <div class="options">
        <div class="option" data-value="acne" data-tags="acne,blemish">
          <strong>Acne & Breakouts</strong><br>
          <span>Pimples, blackheads, blemishes</span>
        </div>
        <div class="option" data-value="aging" data-tags="anti-aging,wrinkles">
          <strong>Anti-Aging</strong><br>
          <span>Fine lines, wrinkles, loss of firmness</span>
        </div>
        <div class="option" data-value="pigmentation" data-tags="brightening,dark-spots">
          <strong>Dark Spots & Pigmentation</strong><br>
          <span>Hyperpigmentation, uneven skin tone</span>
        </div>
        <div class="option" data-value="hydration" data-tags="hydrating,moisturizing">
          <strong>Dehydration</strong><br>
          <span>Dullness, lack of moisture, tight skin</span>
        </div>
      </div>
    </div>

    <!-- Question 3: Routine Level -->
    <div class="question" data-question="3">
      <h3>How experienced are you with skincare?</h3>
      <div class="options">
        <div class="option" data-value="beginner" data-tags="beginner,simple">
          <strong>Just Starting Out</strong><br>
          <span>Want a simple, easy routine</span>
        </div>
        <div class="option" data-value="intermediate" data-tags="intermediate">
          <strong>Some Experience</strong><br>
          <span>Know the basics, want to expand</span>
        </div>
        <div class="option" data-value="advanced" data-tags="advanced">
          <strong>Skincare Enthusiast</strong><br>
          <span>Love multi-step routines and active ingredients</span>
        </div>
      </div>
    </div>

    <!-- Question 4: Budget -->
    <div class="question" data-question="4">
      <h3>What's your budget for a complete routine?</h3>
      <div class="options">
        <div class="option" data-value="budget" data-budget-max="50">
          <strong>Budget-Friendly</strong><br>
          <span>Under $50</span>
        </div>
        <div class="option" data-value="mid" data-budget-max="150">
          <strong>Mid-Range</strong><br>
          <span>$50 - $150</span>
        </div>
        <div class="option" data-value="luxury" data-budget-max="999">
          <strong>Premium</strong><br>
          <span>$150+</span>
        </div>
      </div>
    </div>

    <!-- Results Section -->
    <div class="results" id="results">
      <h2>Your Personalized Skincare Routine</h2>
      <div class="skin-analysis" id="skinAnalysis"></div>
      <div class="recommended-products" id="recommendedProducts"></div>
      <div class="quiz-actions">
        <button class="btn btn-primary" onclick="restartQuiz()">Retake Quiz</button>
        <button class="btn btn-secondary" onclick="addAllToCart()">Add All to Cart</button>
      </div>
    </div>

    <!-- Navigation -->
    <div class="navigation">
      <button class="btn btn-secondary" id="prevBtn" onclick="previousQuestion()" disabled>Previous</button>
      <button class="btn btn-primary" id="nextBtn" onclick="nextQuestion()" disabled>Next</button>
    </div>
  </div>
</div>

<!-- Hidden product data for JavaScript -->
<script type="application/json" id="quiz-products-data">
{
  "products": [
    {% for product in collections['skincare'].products limit: 50 %}
      {
        "id": {{ product.id }},
        "handle": "{{ product.handle }}",
        "title": "{{ product.title | escape }}",
        "price": {{ product.price }},
        "price_formatted": "{{ product.price | money }}",
        "vendor": "{{ product.vendor | escape }}",
        "description": "{{ product.description | strip_html | truncate: 150 | escape }}",
        "image": "{{ product.featured_image | image_url: width: 300 }}",
        "url": "{{ product.url }}",
        "tags": [
          {% for tag in product.tags %}
            "{{ tag | downcase | escape }}"{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ],
        "variants": [
          {% for variant in product.variants %}
            {
              "id": {{ variant.id }},
              "title": "{{ variant.title | escape }}",
              "price": {{ variant.price }},
              "available": {{ variant.available }}
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ]
      }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ]
}
</script>

<style>
  .skin-quiz-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    font-family: {{ settings.type_body_font.family }}, sans-serif;
  }

  .quiz-header {
    text-align: center;
    padding: 40px 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 15px;
    margin-bottom: 30px;
  }

  .quiz-header h1 {
    font-size: 2.5rem;
    margin-bottom: 10px;
    font-weight: bold;
  }

  .quiz-header p {
    font-size: 1.1rem;
    opacity: 0.9;
  }

  .progress-bar {
    height: 8px;
    background: #f0f0f0;
    border-radius: 4px;
    margin-bottom: 30px;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #667eea, #764ba2);
    border-radius: 4px;
    transition: width 0.3s ease;
    width: 0%;
  }

  .question {
    display: none;
    animation: fadeIn 0.5s ease-in;
  }

  .question.active {
    display: block;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .question h3 {
    font-size: 1.8rem;
    margin-bottom: 25px;
    color: #333;
    text-align: center;
  }

  .options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }

  .option {
    background: #f8f9fa;
    border: 3px solid #e9ecef;
    border-radius: 15px;
    padding: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
    position: relative;
  }

  .option:hover {
    border-color: #667eea;
    background: #f0f4ff;
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);
  }

  .option.selected {
    border-color: #667eea;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  }

  .option strong {
    display: block;
    font-size: 1.2rem;
    margin-bottom: 8px;
  }

  .option span {
    font-size: 0.9rem;
    opacity: 0.8;
  }

  .option.selected span {
    opacity: 1;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    margin-top: 40px;
  }

  .btn {
    padding: 15px 30px;
    border: none;
    border-radius: 25px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: bold;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-block;
    text-align: center;
  }

  .btn-primary {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
  }

  .btn-secondary {
    background: #6c757d;
    color: white;
  }

  .btn-secondary:hover {
    background: #545b62;
    transform: translateY(-2px);
  }

  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none !important;
  }

  .results {
    display: none;
    text-align: center;
  }

  .results.active {
    display: block;
    animation: fadeIn 0.5s ease-in;
  }

  .skin-analysis {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    padding: 25px;
    border-radius: 15px;
    margin: 25px 0;
    font-size: 1.1rem;
  }

  .recommended-products {
    display: grid;
    gap: 25px;
    margin: 30px 0;
  }

  .product-card {
    background: white;
    border: 2px solid #f0f0f0;
    border-radius: 15px;
    padding: 25px;
    display: flex;
    align-items: center;
    gap: 20px;
    transition: all 0.3s ease;
    text-align: left;
  }

  .product-card:hover {
    border-color: #667eea;
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.1);
  }

  .product-image {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 10px;
    flex-shrink: 0;
  }

  .product-info {
    flex: 1;
  }

  .product-title {
    font-size: 1.3rem;
    font-weight: bold;
    color: #333;
    margin-bottom: 8px;
  }

  .product-description {
    color: #666;
    font-size: 0.95rem;
    line-height: 1.4;
    margin-bottom: 10px;
  }

  .product-price {
    font-size: 1.2rem;
    font-weight: bold;
    color: #667eea;
  }

  .product-actions {
    display: flex;
    gap: 10px;
    flex-direction: column;
  }

  .quiz-actions {
    display: flex;
    gap: 15px;
    justify-content: center;
    margin-top: 30px;
    flex-wrap: wrap;
  }

  @media (max-width: 768px) {
    .options {
      grid-template-columns: 1fr;
    }
    
    .quiz-header h1 {
      font-size: 2rem;
    }
    
    .product-card {
      flex-direction: column;
      text-align: center;
    }
    
    .quiz-actions {
      flex-direction: column;
    }
  }
</style>

<script>
  let currentQuestion = 1;
  const totalQuestions = 4;
  let answers = {};
  let allProducts = [];

  // Load product data
  document.addEventListener('DOMContentLoaded', function() {
    const productData = JSON.parse(document.getElementById('quiz-products-data').textContent);
    allProducts = productData.products;

    // Initialize event listeners
    document.querySelectorAll('.option').forEach(option => {
      option.addEventListener('click', function() {
        selectOption(this);
      });
    });

    updateProgressBar();
  });

  function selectOption(element) {
    const currentQuestionEl = document.querySelector('.question.active');
    const options = currentQuestionEl.querySelectorAll('.option');
    options.forEach(opt => opt.classList.remove('selected'));
    
    element.classList.add('selected');
    answers[`q${currentQuestion}`] = {
      value: element.dataset.value,
      tags: element.dataset.tags ? element.dataset.tags.split(',') : [],
      budgetMax: element.dataset.budgetMax ? parseInt(element.dataset.budgetMax) : null
    };
    
    document.getElementById('nextBtn').disabled = false;
  }

  function updateProgressBar() {
    const progress = (currentQuestion / totalQuestions) * 100;
    document.getElementById('progressFill').style.width = progress + '%';
  }

  function nextQuestion() {
    if (currentQuestion < totalQuestions) {
      document.querySelector('.question.active').classList.remove('active');
      currentQuestion++;
      document.querySelector(`[data-question="${currentQuestion}"]`).classList.add('active');
      
      updateProgressBar();
      document.getElementById('prevBtn').disabled = false;
      document.getElementById('nextBtn').disabled = true;
      
      if (answers[`q${currentQuestion}`]) {
        const selectedValue = answers[`q${currentQuestion}`].value;
        const option = document.querySelector(`[data-question="${currentQuestion}"] [data-value="${selectedValue}"]`);
        if (option) {
          option.classList.add('selected');
          document.getElementById('nextBtn').disabled = false;
        }
      }
    } else {
      showResults();
    }
    
    document.getElementById('nextBtn').textContent = currentQuestion === totalQuestions ? 'Get Results' : 'Next';
  }

  function previousQuestion() {
    if (currentQuestion > 1) {
      document.querySelector('.question.active').classList.remove('active');
      currentQuestion--;
      document.querySelector(`[data-question="${currentQuestion}"]`).classList.add('active');
      
      updateProgressBar();
      document.getElementById('nextBtn').disabled = false;
      document.getElementById('nextBtn').textContent = currentQuestion === totalQuestions ? 'Get Results' : 'Next';
      
      if (currentQuestion === 1) {
        document.getElementById('prevBtn').disabled = true;
      }
      
      if (answers[`q${currentQuestion}`]) {
        const selectedValue = answers[`q${currentQuestion}`].value;
        const option = document.querySelector(`[data-question="${currentQuestion}"] [data-value="${selectedValue}"]`);
        if (option) {
          option.classList.add('selected');
        }
      }
    }
  }

  function showResults() {
    document.querySelectorAll('.question').forEach(q => q.style.display = 'none');
    document.querySelector('.navigation').style.display = 'none';
    document.querySelector('.progress-bar').style.display = 'none';
    document.getElementById('results').classList.add('active');
    
    generateRecommendations();
  }

  function generateRecommendations() {
    const skinType = answers.q1;
    const concern = answers.q2;
    const experience = answers.q3;
    const budget = answers.q4;

    // Create skin analysis text
    const analysisText = `Your skin type: ${skinType.value.charAt(0).toUpperCase() + skinType.value.slice(1)} | 
                         Main concern: ${concern.value.charAt(0).toUpperCase() + concern.value.slice(1)} | 
                         Experience level: ${experience.value.charAt(0).toUpperCase() + experience.value.slice(1)}`;
    
    document.getElementById('skinAnalysis').innerHTML = `<h3>Your Skin Profile</h3><p>${analysisText}</p>`;

    // Filter products based on answers
    const recommendedProducts = filterProducts();
    
    // Display recommended products
    displayProducts(recommendedProducts);
  }

  function filterProducts() {
    const allTags = [
      ...(answers.q1.tags || []),
      ...(answers.q2.tags || []),
      ...(answers.q3.tags || [])
    ];
    
    const budgetMax = answers.q4.budgetMax ? answers.q4.budgetMax * 100 : 99999; // Convert to cents

    let scoredProducts = allProducts.map(product => {
      let score = 0;
      
      // Score based on tag matches
      allTags.forEach(tag => {
        if (product.tags.includes(tag)) {
          score += 10;
        }
      });
      
      // Bonus for exact skin type match
      if (product.tags.includes(answers.q1.value)) {
        score += 20;
      }
      
      // Budget consideration
      if (product.price <= budgetMax) {
        score += 5;
      } else {
        score -= 10; // Penalty for over budget
      }
      
      return { ...product, score };
    });

    // Sort by score and filter out products with no matches
    scoredProducts = scoredProducts
      .filter(product => product.score > 0)
      .sort((a, b) => b.score - a.score);

    // Return top 3-5 products
    return scoredProducts.slice(0, 5);
  }

  function displayProducts(products) {
    if (products.length === 0) {
      document.getElementById('recommendedProducts').innerHTML = `
        <div class="no-products">
          <h3>No specific matches found</h3>
          <p>Please browse our <a href="/collections/skincare">skincare collection</a> for products that might suit your needs.</p>
        </div>
      `;
      return;
    }

    const productHTML = products.map(product => `
      <div class="product-card" data-product-id="${product.id}">
        <img src="${product.image}" alt="${product.title}" class="product-image" loading="lazy">
        <div class="product-info">
          <h4 class="product-title">${product.title}</h4>
          <p class="product-description">${product.description}</p>
          <div class="product-price">${product.price_formatted}</div>
        </div>
        <div class="product-actions">
          <button class="btn btn-primary" onclick="addToCart(${product.variants[0].id})">Add to Cart</button>
          <a href="${product.url}" class="btn btn-secondary">View Product</a>
        </div>
      </div>
    `).join('');

    document.getElementById('recommendedProducts').innerHTML = productHTML;
  }

  function addToCart(variantId) {
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        items: [{
          id: variantId,
          quantity: 1
        }]
      })
    })
    .then(response => response.json())
    .then(data => {
      // Show success message or update cart
      alert('Product added to cart!');
      // You can replace this with a more elegant notification
    })
    .catch(error => {
      console.error('Error adding to cart:', error);
      alert('Error adding product to cart. Please try again.');
    });
  }

  function addAllToCart() {
    const productCards = document.querySelectorAll('.product-card');
    const items = [];
    
    productCards.forEach(card => {
      const productId = card.dataset.productId;
      const product = allProducts.find(p => p.id == productId);
      if (product && product.variants[0].available) {
        items.push({
          id: product.variants[0].id,
          quantity: 1
        });
      }
    });

    if (items.length === 0) {
      alert('No products available to add to cart.');
      return;
    }

    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ items })
    })
    .then(response => response.json())
    .then(data => {
      alert(`${items.length} products added to cart!`);
    })
    .catch(error => {
      console.error('Error adding products to cart:', error);
      alert('Error adding products to cart. Please try again.');
    });
  }

  function restartQuiz() {
    currentQuestion = 1;
    answers = {};
    
    document.querySelectorAll('.question').forEach(q => {
      q.classList.remove('active');
      q.style.display = 'block';
    });
    document.querySelector('[data-question="1"]').classList.add('active');
    
    document.getElementById('results').classList.remove('active');
    document.querySelector('.navigation').style.display = 'flex';
    document.querySelector('.progress-bar').style.display = 'block';
    
    document.getElementById('prevBtn').disabled = true;
    document.getElementById('nextBtn').disabled = true;
    document.getElementById('nextBtn').textContent = 'Next';
    
    document.querySelectorAll('.option').forEach(opt => opt.classList.remove('selected'));
    updateProgressBar();
  }
</script>